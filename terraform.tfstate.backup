{
  "version": 4,
  "terraform_version": "0.12.16",
  "serial": 24,
  "lineage": "30762f76-5f74-56dc-2aa2-e54f8b039fa1",
  "outputs": {
    "endpoints": {
      "value": "\nVault Server IP (public):  18.177.145.36\nVault Server IP (private): 10.0.101.67\n\nFor example:\n   ssh -i masa.pem ubuntu@18.177.145.36\n\nVault Client IP (public):  52.194.253.144\nVault Client IP (private): 10.0.101.124\n\nFor example:\n   ssh -i masa.pem ubuntu@52.194.253.144\n\nVault Client IAM Role ARN: arn:aws:iam::753646501470:role/masa-vault-auth-vault-client-role\n\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "ubuntu",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-06468fb749c8e88ee",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "creation_date": "2019-11-13T19:28:14.000Z",
            "description": "Canonical, Ubuntu, 18.04 LTS, amd64 bionic image build on 2019-11-13",
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0f6b4f4104d26f399",
            "image_id": "ami-0f6b4f4104d26f399",
            "image_location": "099720109477/ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20191113",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20191113",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": null,
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-06468fb749c8e88ee",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "753646501470",
            "arn": "arn:aws:iam::753646501470:user/masa",
            "id": "2019-12-12 10:05:53.409114 +0000 UTC",
            "user_id": "AIDA266GU7ZPBNOGQ6DZA"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "assume_role",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1903849331",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "policy_id": null,
            "source_json": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "vault-client",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2236466268",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"ConsulAutoJoin\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:DescribeInstances\",\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "override_json": null,
            "policy_id": null,
            "source_json": null,
            "statement": [
              {
                "actions": [
                  "ec2:DescribeInstances"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "ConsulAutoJoin"
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "vault-server",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1707297889",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"ConsulAutoJoin\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:DescribeInstances\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VaultAWSAuthMethod\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:GetUser\",\n        \"iam:GetRole\",\n        \"iam:GetInstanceProfile\",\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VaultKMSUnseal\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:DescribeKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "override_json": null,
            "policy_id": null,
            "source_json": null,
            "statement": [
              {
                "actions": [
                  "ec2:DescribeInstances"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "ConsulAutoJoin"
              },
              {
                "actions": [
                  "ec2:DescribeInstances",
                  "iam:GetInstanceProfile",
                  "iam:GetRole",
                  "iam:GetUser"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "VaultAWSAuthMethod"
              },
              {
                "actions": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "VaultKMSUnseal"
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "apigw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "appmesh_envoy_management",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "appstream",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "athena",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloud_directory",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloudformation",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "cloudtrail",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codebuild",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "codepipeline",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "config",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ec2",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ec2messages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecr_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecr_dkr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs_agent",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ecs_telemetry",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "efs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "elasticloadbalancing",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "events",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "git_codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "glue",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kinesis_firehose",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kinesis_streams",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "kms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "logs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "monitoring",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "rekognition",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_notebook",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sagemaker_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "secretsmanager",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "servicecatalog",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sns",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sqs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ssm",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "ssmmessages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "storagegateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "sts",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "transfer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "data",
      "type": "aws_vpc_endpoint_service",
      "name": "transferserver",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "vault-client",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "72daca0bcc5816b5791133caa6503a1dfba1d049346e21d4c0e4c55b7420a0cb",
            "rendered": "#!/usr/bin/env bash\nset -x\nexec \u003e \u003e(tee /var/log/tf-user-data.log|logger -t user-data ) 2\u003e\u00261\n\nlogger() {\n  DT=$(date '+%Y/%m/%d %H:%M:%S')\n  echo \"$DT $0: $1\"\n}\n\nlogger \"Running\"\n\n##--------------------------------------------------------------------\n## Variables\n\n# Get Private IP address\n#HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname)\nPRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n#PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n\nVAULT_ZIP=\"https://releases.hashicorp.com/vault/1.3.0/vault_1.3.0_linux_amd64.zip\"\nCONSUL_ZIP=\"https://releases.hashicorp.com/consul/1.4.4/consul_1.4.4_linux_amd64.zip\"\nVAULT_SERVICE_NAME=\"vault-masa-vault-auth\"\nCONSUL_DC_NAME=\"dc1\"\nVAULT_ADDR=\"http://active.${VAULT_SERVICE_NAME}.service.${CONSUL_DC_NAME}.consul:8200\"\n\n# Detect package management system.\nYUM=$(which yum 2\u003e/dev/null)\nAPT_GET=$(which apt-get 2\u003e/dev/null)\n\n##--------------------------------------------------------------------\n## Functions\n\nuser_rhel() {\n  # RHEL/CentOS user setup\n  sudo /usr/sbin/groupadd --force --system ${USER_GROUP}\n\n  if ! getent passwd ${USER_NAME} \u003e/dev/null ; then\n    sudo /usr/sbin/adduser \\\n      --system \\\n      --gid ${USER_GROUP} \\\n      --home ${USER_HOME} \\\n      --no-create-home \\\n      --comment \"${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      ${USER_NAME}  \u003e/dev/null\n  fi\n}\n\nuser_ubuntu() {\n  # UBUNTU user setup\n  if ! getent group ${USER_GROUP} \u003e/dev/null\n  then\n    sudo addgroup --system ${USER_GROUP} \u003e/dev/null\n  fi\n\n  if ! getent passwd ${USER_NAME} \u003e/dev/null\n  then\n    sudo adduser \\\n      --system \\\n      --disabled-login \\\n      --ingroup ${USER_GROUP} \\\n      --home ${USER_HOME} \\\n      --no-create-home \\\n      --gecos \"${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      ${USER_NAME}  \u003e/dev/null\n  fi\n}\n\n##--------------------------------------------------------------------\n## Install Base Prerequisites\n\nlogger \"Setting timezone to UTC\"\nsudo timedatectl set-timezone UTC\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-releases-optional\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-supplementary\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras\n  sudo yum -y check-update\n  sudo yum install -q -y wget unzip bind-utils ruby rubygems ntp jq\n  sudo systemctl start ntpd.service\n  sudo systemctl enable ntpd.service\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y wget unzip dnsutils ruby rubygems ntp jq\n  sudo systemctl start ntp.service\n  sudo systemctl enable ntp.service\n  logger \"Disable reverse dns lookup in SSH\"\n  sudo sh -c 'echo \"\\nUseDNS no\" \u003e\u003e /etc/ssh/sshd_config'\n  sudo service ssh restart\nelse\n  logger \"Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install AWS-Specific Prerequisites\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  curl --silent -O https://bootstrap.pypa.io/get-pip.py\n  sudo python get-pip.py\n  sudo pip install awscli\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y awscli\nelse\n  logger \"AWS Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Consul user\n\nUSER_NAME=\"consul\"\nUSER_COMMENT=\"HashiCorp Consul user\"\nUSER_GROUP=\"consul\"\nUSER_HOME=\"/srv/consul\"\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"Setting up user ${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Setting up user ${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Consul\n\nlogger \"Downloading Consul\"\ncurl -o /tmp/consul.zip ${CONSUL_ZIP}\n\nlogger \"Installing Consul\"\nsudo unzip -o /tmp/consul.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/consul\nsudo chown consul:consul /usr/local/bin/consul\n# Config dir\nsudo mkdir -pm 0755 /etc/consul.d\n# Storage dir\nsudo mkdir -pm 0755 /opt/consul\n# SSL dir (optional)\nsudo mkdir -pm 0755 /etc/ssl/consul\n\nlogger \"/usr/local/bin/consul --version: $(/usr/local/bin/consul --version)\"\n\nlogger \"Configuring Consul\"\n\n# Consul Client Config\nsudo tee /etc/consul.d/consul-default.json \u003c\u003cEOF\n{\n  \"datacenter\": \"${CONSUL_DC_NAME}\",\n  \"data_dir\": \"/opt/consul/data\",\n  \"bind_addr\": \"${PRIVATE_IP}\",\n  \"client_addr\": \"0.0.0.0\",\n  \"log_level\": \"INFO\",\n  \"ui\": true,\n  \"retry_join\": [\"provider=aws tag_key=ConsulDC tag_value=${CONSUL_DC_NAME}\"]\n}\nEOF\n\nsudo chown -R consul:consul /etc/consul.d /opt/consul /etc/ssl/consul\nsudo chmod -R 0644 /etc/consul.d/*\n\n##--------------------------------------------------------------------\n## Create Consul Systemd Service\n\n# Service Definition\nread -d '' CONSUL_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Consul Agent\n\n[Service]\nRestart=on-failure\nExecStart=/usr/local/bin/consul agent -config-dir /etc/consul.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=consul\nGroup=consul\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ ! -z ${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"${CONSUL_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/consul*\nelif [[ ! -z ${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"${CONSUL_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/consul*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable consul\nsudo systemctl start consul\n\n##--------------------------------------------------------------------\n## Configure DNS Forwarding for Consul\n## (https://www.consul.io/docs/guides/forwarding.html#dnsmasq-setup)\n\ninstall_dnsmasq_rhel() {\n  logger \"Installing dnsmasq\"\n  sudo yum install -q -y dnsmasq\n\n  configure_dnsmasq\n}\n\ninstall_dnsmasq_ubuntu() {\n  logger \"Installing dnsmasq\"\n  sudo apt-get -qq update\n  sudo apt-get install -qq -y dnsmasq-base dnsmasq\n\n  configure_dnsmasq\n}\n\nconfigure_dnsmasq() {\n  logger \"Configuring dnsmasq to forward .consul requests to consul port 8600\"\n  sudo sh -c 'echo \"server=/consul/127.0.0.1#8600\" \u003e\u003e /etc/dnsmasq.d/consul'\n\n  sudo systemctl restart dnsmasq\n}\n\nconfigure_systemd_resolved() {\n  # See: https://www.consul.io/docs/guides/forwarding.html#systemd-resolved-setup\n  echo \"DNS=127.0.0.1\" | sudo tee -a /etc/systemd/resolved.conf\n  echo \"Domains=~consul\" | sudo tee -a /etc/systemd/resolved.conf\n\n  # We need to create and persist iptable rules to map port 53 to 8600\n  # since Consul (by default) serves DNS on port 8600 and we're avoiding\n  # running Consul as a privileged user\n  sudo iptables -t nat -A OUTPUT -d localhost -p udp -m udp --dport 53 -j REDIRECT --to-ports 8600\n  sudo iptables -t nat -A OUTPUT -d localhost -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 8600\n\n  # Save these iptables rules and persist them\n  # Unattended install of iptables-persistent\n  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections\n  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections\n  sudo apt-get install iptables-persistent\n\n  sudo systemctl restart systemd-resolved\n}\n\n# Tested on Ubuntu 16.04 and 18.04 so far\nif [[ ! -z $(which yum) ]]; then\n  # RHEL\n  install_dnsmasq_rhel\nelif [[ ! -z $(which apt-get) ]]; then\n  # Ubuntu\n  if [[ $(lsb_release -rs) == 16.04 ]]; then\n    install_dnsmasq_ubuntu\n  # Ubuntu 18.04 uses systemd-resolved as the default DNS resolver\n  elif [[ $(lsb_release -rs) == 18.04 ]]; then\n    configure_systemd_resolved\n  else\n    logger \"ERROR configuring DNS forwarding for Consul: unsupported Ubuntu version found\"\n    exit 1;\n  fi\nelse\n  logger \"ERROR configuring DNS forwarding for Consul: OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Vault user\n\nUSER_NAME=\"vault\"\nUSER_COMMENT=\"HashiCorp Vault user\"\nUSER_GROUP=\"vault\"\nUSER_HOME=\"/srv/vault\"\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"Setting up user ${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Setting up user ${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Vault\n\nlogger \"Downloading Vault\"\ncurl -o /tmp/vault.zip ${VAULT_ZIP}\n\nlogger \"Installing Vault\"\nsudo unzip -o /tmp/vault.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/vault\nsudo chown vault:vault /usr/local/bin/vault\nsudo mkdir -pm 0755 /etc/vault.d\nsudo mkdir -pm 0755 /etc/ssl/vault\n\nlogger \"/usr/local/bin/vault --version: $(/usr/local/bin/vault --version)\"\n\nsudo tee -a /etc/environment \u003c\u003cEOF\nexport VAULT_ADDR=\"http://10.0.101.67:8200\"\nexport VAULT_SKIP_VERIFY=true\nEOF\n\nsource /etc/environment\n\n##--------------------------------------------------------------------\n## Shortcut script\n##--------------------------------------------------------------------\ncat \u003c\u003c EOF \u003e /home/ubuntu/vault-agent.hcl\nexit_after_auth = true\npid_file = \"./pidfile\"\n\nauto_auth {\n   method \"aws\" {\n       mount_path = \"auth/aws\"\n       config = {\n           type = \"iam\"\n           role = \"dev-role-iam\"\n       }\n   }\n\n   sink \"file\" {\n       config = {\n           path = \"/home/ubuntu/vault-token-via-agent\"\n       }\n   }\n}\n\nvault {\n   address = \"http://10.0.101.67:8200\"\n}\nEOF\n\nsudo chmod 0775 /home/ubuntu/vault-agent.hcl\n\n\ncat \u003c\u003c EOF \u003e /home/ubuntu/vault-agent-wrapped.hcl\nexit_after_auth = true\npid_file = \"./pidfile\"\n\nauto_auth {\n   method \"aws\" {\n       mount_path = \"auth/aws\"\n       config = {\n           type = \"iam\"\n           role = \"dev-role-iam\"\n       }\n   }\n\n   sink \"file\" {\n       wrap_ttl = \"5m\"\n       config = {\n           path = \"/home/ubuntu/vault-token-via-agent\"\n       }\n   }\n}\n\nvault {\n   address = \"http://10.0.101.67:8200\"\n}\nEOF\n\nsudo chmod 0775 /home/ubuntu/vault-agent-wrapped.hcl\n\n\nlogger \"Complete\"\n",
            "template": "#!/usr/bin/env bash\nset -x\nexec \u003e \u003e(tee /var/log/tf-user-data.log|logger -t user-data ) 2\u003e\u00261\n\nlogger() {\n  DT=$(date '+%Y/%m/%d %H:%M:%S')\n  echo \"$DT $0: $1\"\n}\n\nlogger \"Running\"\n\n##--------------------------------------------------------------------\n## Variables\n\n# Get Private IP address\n#HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname)\nPRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n#PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n\nVAULT_ZIP=\"${tpl_vault_zip_file}\"\nCONSUL_ZIP=\"${tpl_consul_zip_file}\"\nVAULT_SERVICE_NAME=\"${tpl_vault_service_name}\"\nCONSUL_DC_NAME=\"${tpl_consul_dc}\"\nVAULT_ADDR=\"http://active.$${VAULT_SERVICE_NAME}.service.$${CONSUL_DC_NAME}.consul:8200\"\n\n# Detect package management system.\nYUM=$(which yum 2\u003e/dev/null)\nAPT_GET=$(which apt-get 2\u003e/dev/null)\n\n##--------------------------------------------------------------------\n## Functions\n\nuser_rhel() {\n  # RHEL/CentOS user setup\n  sudo /usr/sbin/groupadd --force --system $${USER_GROUP}\n\n  if ! getent passwd $${USER_NAME} \u003e/dev/null ; then\n    sudo /usr/sbin/adduser \\\n      --system \\\n      --gid $${USER_GROUP} \\\n      --home $${USER_HOME} \\\n      --no-create-home \\\n      --comment \"$${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      $${USER_NAME}  \u003e/dev/null\n  fi\n}\n\nuser_ubuntu() {\n  # UBUNTU user setup\n  if ! getent group $${USER_GROUP} \u003e/dev/null\n  then\n    sudo addgroup --system $${USER_GROUP} \u003e/dev/null\n  fi\n\n  if ! getent passwd $${USER_NAME} \u003e/dev/null\n  then\n    sudo adduser \\\n      --system \\\n      --disabled-login \\\n      --ingroup $${USER_GROUP} \\\n      --home $${USER_HOME} \\\n      --no-create-home \\\n      --gecos \"$${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      $${USER_NAME}  \u003e/dev/null\n  fi\n}\n\n##--------------------------------------------------------------------\n## Install Base Prerequisites\n\nlogger \"Setting timezone to UTC\"\nsudo timedatectl set-timezone UTC\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-releases-optional\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-supplementary\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras\n  sudo yum -y check-update\n  sudo yum install -q -y wget unzip bind-utils ruby rubygems ntp jq\n  sudo systemctl start ntpd.service\n  sudo systemctl enable ntpd.service\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y wget unzip dnsutils ruby rubygems ntp jq\n  sudo systemctl start ntp.service\n  sudo systemctl enable ntp.service\n  logger \"Disable reverse dns lookup in SSH\"\n  sudo sh -c 'echo \"\\nUseDNS no\" \u003e\u003e /etc/ssh/sshd_config'\n  sudo service ssh restart\nelse\n  logger \"Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install AWS-Specific Prerequisites\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  curl --silent -O https://bootstrap.pypa.io/get-pip.py\n  sudo python get-pip.py\n  sudo pip install awscli\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y awscli\nelse\n  logger \"AWS Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Consul user\n\nUSER_NAME=\"consul\"\nUSER_COMMENT=\"HashiCorp Consul user\"\nUSER_GROUP=\"consul\"\nUSER_HOME=\"/srv/consul\"\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"Setting up user $${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Setting up user $${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"$${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Consul\n\nlogger \"Downloading Consul\"\ncurl -o /tmp/consul.zip $${CONSUL_ZIP}\n\nlogger \"Installing Consul\"\nsudo unzip -o /tmp/consul.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/consul\nsudo chown consul:consul /usr/local/bin/consul\n# Config dir\nsudo mkdir -pm 0755 /etc/consul.d\n# Storage dir\nsudo mkdir -pm 0755 /opt/consul\n# SSL dir (optional)\nsudo mkdir -pm 0755 /etc/ssl/consul\n\nlogger \"/usr/local/bin/consul --version: $(/usr/local/bin/consul --version)\"\n\nlogger \"Configuring Consul\"\n\n# Consul Client Config\nsudo tee /etc/consul.d/consul-default.json \u003c\u003cEOF\n{\n  \"datacenter\": \"$${CONSUL_DC_NAME}\",\n  \"data_dir\": \"/opt/consul/data\",\n  \"bind_addr\": \"$${PRIVATE_IP}\",\n  \"client_addr\": \"0.0.0.0\",\n  \"log_level\": \"INFO\",\n  \"ui\": true,\n  \"retry_join\": [\"provider=aws tag_key=ConsulDC tag_value=$${CONSUL_DC_NAME}\"]\n}\nEOF\n\nsudo chown -R consul:consul /etc/consul.d /opt/consul /etc/ssl/consul\nsudo chmod -R 0644 /etc/consul.d/*\n\n##--------------------------------------------------------------------\n## Create Consul Systemd Service\n\n# Service Definition\nread -d '' CONSUL_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Consul Agent\n\n[Service]\nRestart=on-failure\nExecStart=/usr/local/bin/consul agent -config-dir /etc/consul.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=consul\nGroup=consul\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ ! -z $${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"$${CONSUL_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/consul*\nelif [[ ! -z $${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"$${CONSUL_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/consul*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable consul\nsudo systemctl start consul\n\n##--------------------------------------------------------------------\n## Configure DNS Forwarding for Consul\n## (https://www.consul.io/docs/guides/forwarding.html#dnsmasq-setup)\n\ninstall_dnsmasq_rhel() {\n  logger \"Installing dnsmasq\"\n  sudo yum install -q -y dnsmasq\n\n  configure_dnsmasq\n}\n\ninstall_dnsmasq_ubuntu() {\n  logger \"Installing dnsmasq\"\n  sudo apt-get -qq update\n  sudo apt-get install -qq -y dnsmasq-base dnsmasq\n\n  configure_dnsmasq\n}\n\nconfigure_dnsmasq() {\n  logger \"Configuring dnsmasq to forward .consul requests to consul port 8600\"\n  sudo sh -c 'echo \"server=/consul/127.0.0.1#8600\" \u003e\u003e /etc/dnsmasq.d/consul'\n\n  sudo systemctl restart dnsmasq\n}\n\nconfigure_systemd_resolved() {\n  # See: https://www.consul.io/docs/guides/forwarding.html#systemd-resolved-setup\n  echo \"DNS=127.0.0.1\" | sudo tee -a /etc/systemd/resolved.conf\n  echo \"Domains=~consul\" | sudo tee -a /etc/systemd/resolved.conf\n\n  # We need to create and persist iptable rules to map port 53 to 8600\n  # since Consul (by default) serves DNS on port 8600 and we're avoiding\n  # running Consul as a privileged user\n  sudo iptables -t nat -A OUTPUT -d localhost -p udp -m udp --dport 53 -j REDIRECT --to-ports 8600\n  sudo iptables -t nat -A OUTPUT -d localhost -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 8600\n\n  # Save these iptables rules and persist them\n  # Unattended install of iptables-persistent\n  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections\n  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections\n  sudo apt-get install iptables-persistent\n\n  sudo systemctl restart systemd-resolved\n}\n\n# Tested on Ubuntu 16.04 and 18.04 so far\nif [[ ! -z $(which yum) ]]; then\n  # RHEL\n  install_dnsmasq_rhel\nelif [[ ! -z $(which apt-get) ]]; then\n  # Ubuntu\n  if [[ $(lsb_release -rs) == 16.04 ]]; then\n    install_dnsmasq_ubuntu\n  # Ubuntu 18.04 uses systemd-resolved as the default DNS resolver\n  elif [[ $(lsb_release -rs) == 18.04 ]]; then\n    configure_systemd_resolved\n  else\n    logger \"ERROR configuring DNS forwarding for Consul: unsupported Ubuntu version found\"\n    exit 1;\n  fi\nelse\n  logger \"ERROR configuring DNS forwarding for Consul: OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Vault user\n\nUSER_NAME=\"vault\"\nUSER_COMMENT=\"HashiCorp Vault user\"\nUSER_GROUP=\"vault\"\nUSER_HOME=\"/srv/vault\"\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"Setting up user $${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Setting up user $${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"$${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Vault\n\nlogger \"Downloading Vault\"\ncurl -o /tmp/vault.zip $${VAULT_ZIP}\n\nlogger \"Installing Vault\"\nsudo unzip -o /tmp/vault.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/vault\nsudo chown vault:vault /usr/local/bin/vault\nsudo mkdir -pm 0755 /etc/vault.d\nsudo mkdir -pm 0755 /etc/ssl/vault\n\nlogger \"/usr/local/bin/vault --version: $(/usr/local/bin/vault --version)\"\n\nsudo tee -a /etc/environment \u003c\u003cEOF\nexport VAULT_ADDR=\"http://${tpl_vault_server_addr}:8200\"\nexport VAULT_SKIP_VERIFY=true\nEOF\n\nsource /etc/environment\n\n##--------------------------------------------------------------------\n## Shortcut script\n##--------------------------------------------------------------------\ncat \u003c\u003c EOF \u003e /home/ubuntu/vault-agent.hcl\nexit_after_auth = true\npid_file = \"./pidfile\"\n\nauto_auth {\n   method \"aws\" {\n       mount_path = \"auth/aws\"\n       config = {\n           type = \"iam\"\n           role = \"dev-role-iam\"\n       }\n   }\n\n   sink \"file\" {\n       config = {\n           path = \"/home/ubuntu/vault-token-via-agent\"\n       }\n   }\n}\n\nvault {\n   address = \"http://${tpl_vault_server_addr}:8200\"\n}\nEOF\n\nsudo chmod 0775 /home/ubuntu/vault-agent.hcl\n\n\ncat \u003c\u003c EOF \u003e /home/ubuntu/vault-agent-wrapped.hcl\nexit_after_auth = true\npid_file = \"./pidfile\"\n\nauto_auth {\n   method \"aws\" {\n       mount_path = \"auth/aws\"\n       config = {\n           type = \"iam\"\n           role = \"dev-role-iam\"\n       }\n   }\n\n   sink \"file\" {\n       wrap_ttl = \"5m\"\n       config = {\n           path = \"/home/ubuntu/vault-token-via-agent\"\n       }\n   }\n}\n\nvault {\n   address = \"http://${tpl_vault_server_addr}:8200\"\n}\nEOF\n\nsudo chmod 0775 /home/ubuntu/vault-agent-wrapped.hcl\n\n\nlogger \"Complete\"\n",
            "vars": {
              "tpl_consul_dc": "dc1",
              "tpl_consul_zip_file": "https://releases.hashicorp.com/consul/1.4.4/consul_1.4.4_linux_amd64.zip",
              "tpl_vault_server_addr": "10.0.101.67",
              "tpl_vault_service_name": "vault-masa-vault-auth",
              "tpl_vault_zip_file": "https://releases.hashicorp.com/vault/1.3.0/vault_1.3.0_linux_amd64.zip"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "vault-server",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "0f20f44bbc4cc6803efcdc16ea895964c67d260a64ade9b9a1fefc8bd0877e74",
            "rendered": "#!/usr/bin/env bash\nset -x\nexec \u003e \u003e(tee /var/log/tf-user-data.log|logger -t user-data ) 2\u003e\u00261\n\nlogger() {\n  DT=$(date '+%Y/%m/%d %H:%M:%S')\n  echo \"$DT $0: $1\"\n}\n\nlogger \"Running\"\n\n##--------------------------------------------------------------------\n## Variables\n\n# Get Private IP address\n#HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname)\nPRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n#PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n\nVAULT_ZIP=\"https://releases.hashicorp.com/vault/1.3.0/vault_1.3.0_linux_amd64.zip\"\nCONSUL_ZIP=\"https://releases.hashicorp.com/consul/1.4.4/consul_1.4.4_linux_amd64.zip\"\n\nAWS_REGION=\"ap-northeast-1\"\nKMS_KEY=\"a7aa022d-b5e7-4941-9a46-2c436c2cbca6\"\nCONSUL_BOOSTRAP_EXPECT=\"1\"\n\n# Detect package management system.\nYUM=$(which yum 2\u003e/dev/null)\nAPT_GET=$(which apt-get 2\u003e/dev/null)\n\n##--------------------------------------------------------------------\n## Functions\n\nuser_rhel() {\n  # RHEL/CentOS user setup\n  sudo /usr/sbin/groupadd --force --system ${USER_GROUP}\n\n  if ! getent passwd ${USER_NAME} \u003e/dev/null ; then\n    sudo /usr/sbin/adduser \\\n      --system \\\n      --gid ${USER_GROUP} \\\n      --home ${USER_HOME} \\\n      --no-create-home \\\n      --comment \"${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      ${USER_NAME}  \u003e/dev/null\n  fi\n}\n\nuser_ubuntu() {\n  # UBUNTU user setup\n  if ! getent group ${USER_GROUP} \u003e/dev/null\n  then\n    sudo addgroup --system ${USER_GROUP} \u003e/dev/null\n  fi\n\n  if ! getent passwd ${USER_NAME} \u003e/dev/null\n  then\n    sudo adduser \\\n      --system \\\n      --disabled-login \\\n      --ingroup ${USER_GROUP} \\\n      --home ${USER_HOME} \\\n      --no-create-home \\\n      --gecos \"${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      ${USER_NAME}  \u003e/dev/null\n  fi\n}\n\n##--------------------------------------------------------------------\n## Install Base Prerequisites\n\nlogger \"Setting timezone to UTC\"\nsudo timedatectl set-timezone UTC\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-releases-optional\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-supplementary\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras\n  sudo yum -y check-update\n  sudo yum install -q -y wget unzip bind-utils ruby rubygems ntp jq\n  sudo systemctl start ntpd.service\n  sudo systemctl enable ntpd.service\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y wget unzip dnsutils ruby rubygems ntp jq\n  sudo systemctl start ntp.service\n  sudo systemctl enable ntp.service\n  logger \"Disable reverse dns lookup in SSH\"\n  sudo sh -c 'echo \"\\nUseDNS no\" \u003e\u003e /etc/ssh/sshd_config'\n  sudo service ssh restart\nelse\n  logger \"Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install AWS-Specific Prerequisites\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  curl --silent -O https://bootstrap.pypa.io/get-pip.py\n  sudo python get-pip.py\n  sudo pip install awscli\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y awscli\nelse\n  logger \"AWS Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Consul user\n\nUSER_NAME=\"consul\"\nUSER_COMMENT=\"HashiCorp Consul user\"\nUSER_GROUP=\"consul\"\nUSER_HOME=\"/srv/consul\"\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"Setting up user ${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Setting up user ${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Consul\n\nlogger \"Downloading Consul\"\ncurl -o /tmp/consul.zip ${CONSUL_ZIP}\n\nlogger \"Installing Consul\"\nsudo unzip -o /tmp/consul.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/consul\nsudo chown consul:consul /usr/local/bin/consul\n# Config dir\nsudo mkdir -pm 0755 /etc/consul.d\n# Storage dir\nsudo mkdir -pm 0755 /opt/consul\n# SSL dir (optional)\nsudo mkdir -pm 0755 /etc/ssl/consul\n\nlogger \"/usr/local/bin/consul --version: $(/usr/local/bin/consul --version)\"\n\nlogger \"Configuring Consul\"\n\n# Consul Client Config\nsudo tee /etc/consul.d/consul-default.json \u003c\u003cEOF\n{\n  \"datacenter\": \"dc1\",\n  \"data_dir\": \"/opt/consul/data\",\n  \"bind_addr\": \"${PRIVATE_IP}\",\n  \"client_addr\": \"0.0.0.0\",\n  \"log_level\": \"INFO\",\n  \"ui\": true,\n  \"retry_join\": [\"provider=aws tag_key=ConsulDC tag_value=dc1\"]\n}\nEOF\n\n# Consul Server Config\nsudo tee /etc/consul.d/consul-server.json \u003c\u003cEOF\n{\n  \"server\": true,\n  \"bootstrap_expect\": ${CONSUL_BOOSTRAP_EXPECT}\n}\nEOF\n\nsudo chown -R consul:consul /etc/consul.d /opt/consul /etc/ssl/consul\nsudo chmod -R 0644 /etc/consul.d/*\n\n##--------------------------------------------------------------------\n## Create Consul Systemd Service\n\n# Service Definition\nread -d '' CONSUL_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Consul Agent\n\n[Service]\nRestart=on-failure\nExecStart=/usr/local/bin/consul agent -config-dir /etc/consul.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=consul\nGroup=consul\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ ! -z ${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"${CONSUL_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/consul*\nelif [[ ! -z ${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"${CONSUL_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/consul*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable consul\nsudo systemctl start consul\n\n##--------------------------------------------------------------------\n## Configure DNS Forwarding for Consul\n## (https://www.consul.io/docs/guides/forwarding.html#dnsmasq-setup)\n\ninstall_dnsmasq_rhel() {\n  logger \"Installing dnsmasq\"\n  sudo yum install -q -y dnsmasq\n\n  configure_dnsmasq\n}\n\ninstall_dnsmasq_ubuntu() {\n  logger \"Installing dnsmasq\"\n  sudo apt-get -qq update\n  sudo apt-get install -qq -y dnsmasq-base dnsmasq\n\n  configure_dnsmasq\n}\n\nconfigure_dnsmasq() {\n  logger \"Configuring dnsmasq to forward .consul requests to consul port 8600\"\n  sudo sh -c 'echo \"server=/consul/127.0.0.1#8600\" \u003e\u003e /etc/dnsmasq.d/consul'\n\n  sudo systemctl restart dnsmasq\n}\n\nconfigure_systemd_resolved() {\n  # See: https://www.consul.io/docs/guides/forwarding.html#systemd-resolved-setup\n  echo \"DNS=127.0.0.1\" | sudo tee -a /etc/systemd/resolved.conf\n  echo \"Domains=~consul\" | sudo tee -a /etc/systemd/resolved.conf\n\n  # We need to create and persist iptable rules to map port 53 to 8600\n  # since Consul (by default) serves DNS on port 8600 and we're avoiding\n  # running Consul as a privileged user\n  sudo iptables -t nat -A OUTPUT -d localhost -p udp -m udp --dport 53 -j REDIRECT --to-ports 8600\n  sudo iptables -t nat -A OUTPUT -d localhost -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 8600\n\n  # Save these iptables rules and persist them\n  # Unattended install of iptables-persistent\n  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections\n  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections\n  sudo apt-get install iptables-persistent\n\n  sudo systemctl restart systemd-resolved\n}\n\n# Tested on Ubuntu 16.04 and 18.04 so far\nif [[ ! -z $(which yum) ]]; then\n  # RHEL\n  install_dnsmasq_rhel\nelif [[ ! -z $(which apt-get) ]]; then\n  # Ubuntu\n  if [[ $(lsb_release -rs) == 16.04 ]]; then\n    install_dnsmasq_ubuntu\n  # Ubuntu 18.04 uses systemd-resolved as the default DNS resolver\n  elif [[ $(lsb_release -rs) == 18.04 ]]; then\n    configure_systemd_resolved\n  else\n    logger \"ERROR configuring DNS forwarding for Consul: unsupported Ubuntu version found\"\n    exit 1;\n  fi\nelse\n  logger \"ERROR configuring DNS forwarding for Consul: OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Vault user\n\nUSER_NAME=\"vault\"\nUSER_COMMENT=\"HashiCorp Vault user\"\nUSER_GROUP=\"vault\"\nUSER_HOME=\"/srv/vault\"\n\nif [[ ! -z ${YUM} ]]; then\n  logger \"Setting up user ${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z ${APT_GET} ]]; then\n  logger \"Setting up user ${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Vault\n\nlogger \"Downloading Vault\"\ncurl -o /tmp/vault.zip ${VAULT_ZIP}\n\nlogger \"Installing Vault\"\nsudo unzip -o /tmp/vault.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/vault\nsudo chown vault:vault /usr/local/bin/vault\nsudo mkdir -pm 0755 /etc/vault.d\nsudo mkdir -pm 0755 /etc/ssl/vault\n\nlogger \"/usr/local/bin/vault --version: $(/usr/local/bin/vault --version)\"\n\nlogger \"Configuring Vault\"\nsudo tee /etc/vault.d/vault.hcl \u003c\u003cEOF\nstorage \"consul\" {\n    service = \"vault-masa-vault-auth\"\n    path = \"vault-masa-vault-auth\"\n}\n\nlistener \"tcp\" {\n  address     = \"${PRIVATE_IP}:8200\"\n  #address     = \"0.0.0.0:8200\"\n  tls_disable = 1\n}\n\n#api_addr = \"http://active.vault-masa-vault-auth.service.dc1.consul:8200\"\n#cluster_addr = \"https://active.vault-masa-vault-auth.service.dc1.consul:8201\"\n\nseal \"awskms\" {\n  region = \"${AWS_REGION}\"\n  kms_key_id = \"${KMS_KEY}\"\n}\n\nui=true\nEOF\n\nsudo chown -R vault:vault /etc/vault.d /etc/ssl/vault\nsudo chmod -R 0644 /etc/vault.d/*\n\nsudo tee -a /etc/environment \u003c\u003cEOF\nexport VAULT_ADDR=http://${PRIVATE_IP}:8200\nexport VAULT_SKIP_VERIFY=true\nEOF\n\nsource /etc/environment\n\nlogger \"Granting mlock syscall to vault binary\"\nsudo setcap cap_ipc_lock=+ep /usr/local/bin/vault\n\n##--------------------------------------------------------------------\n## Install Vault Systemd Service\n\nread -d '' VAULT_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Vault Agent\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nRestart=on-failure\nPermissionsStartOnly=true\nExecStartPre=/sbin/setcap 'cap_ipc_lock=+ep' /usr/local/bin/vault\nExecStart=/usr/local/bin/vault server -config /etc/vault.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=vault\nGroup=vault\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\n\nif [[ ! -z ${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"${VAULT_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/vault.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/vault*\nelif [[ ! -z ${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"${VAULT_SERVICE}\" | sudo tee ${SYSTEMD_DIR}/vault.service\n  sudo chmod 0664 ${SYSTEMD_DIR}/vault*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable vault\nsudo systemctl start vault\n\n##--------------------------------------------------------------------\n## Shortcut script\n##--------------------------------------------------------------------\nsudo cat \u003c\u003c EOF \u003e /home/ubuntu/aws_auth.sh\nvault secrets enable -path=\"secret\" kv\nvault kv put secret/myapp/config ttl='30s' username='appuser' password='suP3rsec(et!'\n\necho \"path \\\"secret/myapp/*\\\" {\n    capabilities = [\\\"read\\\", \\\"list\\\"]\n}\" | vault policy write myapp -\n\nvault auth enable aws\nvault write -force auth/aws/config/client\n\nvault write auth/aws/role/dev-role-iam auth_type=iam bound_iam_principal_arn=\"arn:aws:iam::753646501470:role/masa-vault-auth-vault-client-role\" policies=myapp ttl=24h\nEOF\n\nsudo chmod +x /home/ubuntu/aws_auth.sh\n\nlogger \"Complete\"\n",
            "template": "#!/usr/bin/env bash\nset -x\nexec \u003e \u003e(tee /var/log/tf-user-data.log|logger -t user-data ) 2\u003e\u00261\n\nlogger() {\n  DT=$(date '+%Y/%m/%d %H:%M:%S')\n  echo \"$DT $0: $1\"\n}\n\nlogger \"Running\"\n\n##--------------------------------------------------------------------\n## Variables\n\n# Get Private IP address\n#HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname)\nPRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n#PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n\nVAULT_ZIP=\"${tpl_vault_zip_file}\"\nCONSUL_ZIP=\"${tpl_consul_zip_file}\"\n\nAWS_REGION=\"${tpl_aws_region}\"\nKMS_KEY=\"${tpl_kms_key}\"\nCONSUL_BOOSTRAP_EXPECT=\"${tpl_consul_bootstrap_expect}\"\n\n# Detect package management system.\nYUM=$(which yum 2\u003e/dev/null)\nAPT_GET=$(which apt-get 2\u003e/dev/null)\n\n##--------------------------------------------------------------------\n## Functions\n\nuser_rhel() {\n  # RHEL/CentOS user setup\n  sudo /usr/sbin/groupadd --force --system $${USER_GROUP}\n\n  if ! getent passwd $${USER_NAME} \u003e/dev/null ; then\n    sudo /usr/sbin/adduser \\\n      --system \\\n      --gid $${USER_GROUP} \\\n      --home $${USER_HOME} \\\n      --no-create-home \\\n      --comment \"$${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      $${USER_NAME}  \u003e/dev/null\n  fi\n}\n\nuser_ubuntu() {\n  # UBUNTU user setup\n  if ! getent group $${USER_GROUP} \u003e/dev/null\n  then\n    sudo addgroup --system $${USER_GROUP} \u003e/dev/null\n  fi\n\n  if ! getent passwd $${USER_NAME} \u003e/dev/null\n  then\n    sudo adduser \\\n      --system \\\n      --disabled-login \\\n      --ingroup $${USER_GROUP} \\\n      --home $${USER_HOME} \\\n      --no-create-home \\\n      --gecos \"$${USER_COMMENT}\" \\\n      --shell /bin/false \\\n      $${USER_NAME}  \u003e/dev/null\n  fi\n}\n\n##--------------------------------------------------------------------\n## Install Base Prerequisites\n\nlogger \"Setting timezone to UTC\"\nsudo timedatectl set-timezone UTC\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-releases-optional\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-supplementary\n  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras\n  sudo yum -y check-update\n  sudo yum install -q -y wget unzip bind-utils ruby rubygems ntp jq\n  sudo systemctl start ntpd.service\n  sudo systemctl enable ntpd.service\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y wget unzip dnsutils ruby rubygems ntp jq\n  sudo systemctl start ntp.service\n  sudo systemctl enable ntp.service\n  logger \"Disable reverse dns lookup in SSH\"\n  sudo sh -c 'echo \"\\nUseDNS no\" \u003e\u003e /etc/ssh/sshd_config'\n  sudo service ssh restart\nelse\n  logger \"Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install AWS-Specific Prerequisites\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"RHEL/CentOS system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  curl --silent -O https://bootstrap.pypa.io/get-pip.py\n  sudo python get-pip.py\n  sudo pip install awscli\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Debian/Ubuntu system detected\"\n  logger \"Performing updates and installing prerequisites\"\n  sudo apt-get -qq -y update\n  sudo apt-get install -qq -y awscli\nelse\n  logger \"AWS Prerequisites not installed due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Consul user\n\nUSER_NAME=\"consul\"\nUSER_COMMENT=\"HashiCorp Consul user\"\nUSER_GROUP=\"consul\"\nUSER_HOME=\"/srv/consul\"\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"Setting up user $${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Setting up user $${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"$${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Consul\n\nlogger \"Downloading Consul\"\ncurl -o /tmp/consul.zip $${CONSUL_ZIP}\n\nlogger \"Installing Consul\"\nsudo unzip -o /tmp/consul.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/consul\nsudo chown consul:consul /usr/local/bin/consul\n# Config dir\nsudo mkdir -pm 0755 /etc/consul.d\n# Storage dir\nsudo mkdir -pm 0755 /opt/consul\n# SSL dir (optional)\nsudo mkdir -pm 0755 /etc/ssl/consul\n\nlogger \"/usr/local/bin/consul --version: $(/usr/local/bin/consul --version)\"\n\nlogger \"Configuring Consul\"\n\n# Consul Client Config\nsudo tee /etc/consul.d/consul-default.json \u003c\u003cEOF\n{\n  \"datacenter\": \"${tpl_consul_dc}\",\n  \"data_dir\": \"/opt/consul/data\",\n  \"bind_addr\": \"$${PRIVATE_IP}\",\n  \"client_addr\": \"0.0.0.0\",\n  \"log_level\": \"INFO\",\n  \"ui\": true,\n  \"retry_join\": [\"provider=aws tag_key=ConsulDC tag_value=${tpl_consul_dc}\"]\n}\nEOF\n\n# Consul Server Config\nsudo tee /etc/consul.d/consul-server.json \u003c\u003cEOF\n{\n  \"server\": true,\n  \"bootstrap_expect\": $${CONSUL_BOOSTRAP_EXPECT}\n}\nEOF\n\nsudo chown -R consul:consul /etc/consul.d /opt/consul /etc/ssl/consul\nsudo chmod -R 0644 /etc/consul.d/*\n\n##--------------------------------------------------------------------\n## Create Consul Systemd Service\n\n# Service Definition\nread -d '' CONSUL_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Consul Agent\n\n[Service]\nRestart=on-failure\nExecStart=/usr/local/bin/consul agent -config-dir /etc/consul.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=consul\nGroup=consul\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif [[ ! -z $${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"$${CONSUL_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/consul*\nelif [[ ! -z $${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"$${CONSUL_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/consul.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/consul*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable consul\nsudo systemctl start consul\n\n##--------------------------------------------------------------------\n## Configure DNS Forwarding for Consul\n## (https://www.consul.io/docs/guides/forwarding.html#dnsmasq-setup)\n\ninstall_dnsmasq_rhel() {\n  logger \"Installing dnsmasq\"\n  sudo yum install -q -y dnsmasq\n\n  configure_dnsmasq\n}\n\ninstall_dnsmasq_ubuntu() {\n  logger \"Installing dnsmasq\"\n  sudo apt-get -qq update\n  sudo apt-get install -qq -y dnsmasq-base dnsmasq\n\n  configure_dnsmasq\n}\n\nconfigure_dnsmasq() {\n  logger \"Configuring dnsmasq to forward .consul requests to consul port 8600\"\n  sudo sh -c 'echo \"server=/consul/127.0.0.1#8600\" \u003e\u003e /etc/dnsmasq.d/consul'\n\n  sudo systemctl restart dnsmasq\n}\n\nconfigure_systemd_resolved() {\n  # See: https://www.consul.io/docs/guides/forwarding.html#systemd-resolved-setup\n  echo \"DNS=127.0.0.1\" | sudo tee -a /etc/systemd/resolved.conf\n  echo \"Domains=~consul\" | sudo tee -a /etc/systemd/resolved.conf\n\n  # We need to create and persist iptable rules to map port 53 to 8600\n  # since Consul (by default) serves DNS on port 8600 and we're avoiding\n  # running Consul as a privileged user\n  sudo iptables -t nat -A OUTPUT -d localhost -p udp -m udp --dport 53 -j REDIRECT --to-ports 8600\n  sudo iptables -t nat -A OUTPUT -d localhost -p tcp -m tcp --dport 53 -j REDIRECT --to-ports 8600\n\n  # Save these iptables rules and persist them\n  # Unattended install of iptables-persistent\n  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections\n  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections\n  sudo apt-get install iptables-persistent\n\n  sudo systemctl restart systemd-resolved\n}\n\n# Tested on Ubuntu 16.04 and 18.04 so far\nif [[ ! -z $(which yum) ]]; then\n  # RHEL\n  install_dnsmasq_rhel\nelif [[ ! -z $(which apt-get) ]]; then\n  # Ubuntu\n  if [[ $(lsb_release -rs) == 16.04 ]]; then\n    install_dnsmasq_ubuntu\n  # Ubuntu 18.04 uses systemd-resolved as the default DNS resolver\n  elif [[ $(lsb_release -rs) == 18.04 ]]; then\n    configure_systemd_resolved\n  else\n    logger \"ERROR configuring DNS forwarding for Consul: unsupported Ubuntu version found\"\n    exit 1;\n  fi\nelse\n  logger \"ERROR configuring DNS forwarding for Consul: OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Configure Vault user\n\nUSER_NAME=\"vault\"\nUSER_COMMENT=\"HashiCorp Vault user\"\nUSER_GROUP=\"vault\"\nUSER_HOME=\"/srv/vault\"\n\nif [[ ! -z $${YUM} ]]; then\n  logger \"Setting up user $${USER_NAME} for RHEL/CentOS\"\n  user_rhel\nelif [[ ! -z $${APT_GET} ]]; then\n  logger \"Setting up user $${USER_NAME} for Debian/Ubuntu\"\n  user_ubuntu\nelse\n  logger \"$${USER_NAME} user not created due to OS detection failure\"\n  exit 1;\nfi\n\n##--------------------------------------------------------------------\n## Install Vault\n\nlogger \"Downloading Vault\"\ncurl -o /tmp/vault.zip $${VAULT_ZIP}\n\nlogger \"Installing Vault\"\nsudo unzip -o /tmp/vault.zip -d /usr/local/bin/\nsudo chmod 0755 /usr/local/bin/vault\nsudo chown vault:vault /usr/local/bin/vault\nsudo mkdir -pm 0755 /etc/vault.d\nsudo mkdir -pm 0755 /etc/ssl/vault\n\nlogger \"/usr/local/bin/vault --version: $(/usr/local/bin/vault --version)\"\n\nlogger \"Configuring Vault\"\nsudo tee /etc/vault.d/vault.hcl \u003c\u003cEOF\nstorage \"consul\" {\n    service = \"${tpl_vault_service_name}\"\n    path = \"${tpl_vault_service_name}\"\n}\n\nlistener \"tcp\" {\n  address     = \"$${PRIVATE_IP}:8200\"\n  #address     = \"0.0.0.0:8200\"\n  tls_disable = 1\n}\n\n#api_addr = \"http://active.${tpl_vault_service_name}.service.${tpl_consul_dc}.consul:8200\"\n#cluster_addr = \"https://active.${tpl_vault_service_name}.service.${tpl_consul_dc}.consul:8201\"\n\nseal \"awskms\" {\n  region = \"$${AWS_REGION}\"\n  kms_key_id = \"$${KMS_KEY}\"\n}\n\nui=true\nEOF\n\nsudo chown -R vault:vault /etc/vault.d /etc/ssl/vault\nsudo chmod -R 0644 /etc/vault.d/*\n\nsudo tee -a /etc/environment \u003c\u003cEOF\nexport VAULT_ADDR=http://$${PRIVATE_IP}:8200\nexport VAULT_SKIP_VERIFY=true\nEOF\n\nsource /etc/environment\n\nlogger \"Granting mlock syscall to vault binary\"\nsudo setcap cap_ipc_lock=+ep /usr/local/bin/vault\n\n##--------------------------------------------------------------------\n## Install Vault Systemd Service\n\nread -d '' VAULT_SERVICE \u003c\u003cEOF\n[Unit]\nDescription=Vault Agent\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nRestart=on-failure\nPermissionsStartOnly=true\nExecStartPre=/sbin/setcap 'cap_ipc_lock=+ep' /usr/local/bin/vault\nExecStart=/usr/local/bin/vault server -config /etc/vault.d\nExecReload=/bin/kill -HUP $MAINPID\nKillSignal=SIGTERM\nUser=vault\nGroup=vault\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\n\nif [[ ! -z $${YUM} ]]; then\n  SYSTEMD_DIR=\"/etc/systemd/system\"\n  logger \"Installing systemd services for RHEL/CentOS\"\n  echo \"$${VAULT_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/vault.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/vault*\nelif [[ ! -z $${APT_GET} ]]; then\n  SYSTEMD_DIR=\"/lib/systemd/system\"\n  logger \"Installing systemd services for Debian/Ubuntu\"\n  echo \"$${VAULT_SERVICE}\" | sudo tee $${SYSTEMD_DIR}/vault.service\n  sudo chmod 0664 $${SYSTEMD_DIR}/vault*\nelse\n  logger \"Service not installed due to OS detection failure\"\n  exit 1;\nfi\n\nsudo systemctl enable vault\nsudo systemctl start vault\n\n##--------------------------------------------------------------------\n## Shortcut script\n##--------------------------------------------------------------------\nsudo cat \u003c\u003c EOF \u003e /home/ubuntu/aws_auth.sh\nvault secrets enable -path=\"secret\" kv\nvault kv put secret/myapp/config ttl='30s' username='appuser' password='suP3rsec(et!'\n\necho \"path \\\"secret/myapp/*\\\" {\n    capabilities = [\\\"read\\\", \\\"list\\\"]\n}\" | vault policy write myapp -\n\nvault auth enable aws\nvault write -force auth/aws/config/client\n\nvault write auth/aws/role/dev-role-iam auth_type=iam bound_iam_principal_arn=\"arn:aws:iam::${account_id}:role/${role_name}\" policies=myapp ttl=24h\nEOF\n\nsudo chmod +x /home/ubuntu/aws_auth.sh\n\nlogger \"Complete\"\n",
            "vars": {
              "account_id": "753646501470",
              "role_name": "masa-vault-auth-vault-client-role",
              "tpl_aws_region": "ap-northeast-1",
              "tpl_consul_bootstrap_expect": "1",
              "tpl_consul_dc": "dc1",
              "tpl_consul_zip_file": "https://releases.hashicorp.com/consul/1.4.4/consul_1.4.4_linux_amd64.zip",
              "tpl_kms_key": "a7aa022d-b5e7-4941-9a46-2c436c2cbca6",
              "tpl_vault_service_name": "vault-masa-vault-auth",
              "tpl_vault_zip_file": "https://releases.hashicorp.com/vault/1.3.0/vault_1.3.0_linux_amd64.zip"
            }
          }
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_customer_gateway",
      "name": "this",
      "each": "map",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_default_network_acl",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_default_vpc",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_egress_only_internet_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_elasticache_subnet_group",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "vault-client",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::753646501470:instance-profile/masa-vault-auth-vault-client-instance-profile",
            "create_date": "2019-12-12T10:04:59Z",
            "id": "masa-vault-auth-vault-client-instance-profile",
            "name": "masa-vault-auth-vault-client-instance-profile",
            "name_prefix": null,
            "path": "/",
            "role": "masa-vault-auth-vault-client-role",
            "roles": [
              "masa-vault-auth-vault-client-role"
            ],
            "unique_id": "AIPA266GU7ZPE27MVYZF6"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.vault-client"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "vault-server",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::753646501470:instance-profile/masa-vault-auth-vault-server-instance-profile",
            "create_date": "2019-12-12T10:04:59Z",
            "id": "masa-vault-auth-vault-server-instance-profile",
            "name": "masa-vault-auth-vault-server-instance-profile",
            "name_prefix": null,
            "path": "/",
            "role": "masa-vault-auth-vault-server-role",
            "roles": [
              "masa-vault-auth-vault-server-role"
            ],
            "unique_id": "AIPA266GU7ZPHEVJPW6CG"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.vault-server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "vault-client",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::753646501470:role/masa-vault-auth-vault-client-role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2019-12-12T10:04:57Z",
            "description": "",
            "force_detach_policies": false,
            "id": "masa-vault-auth-vault-client-role",
            "max_session_duration": 3600,
            "name": "masa-vault-auth-vault-client-role",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "unique_id": "AROA266GU7ZPFLHVCO5R4"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "vault-server",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::753646501470:role/masa-vault-auth-vault-server-role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2019-12-12T10:04:57Z",
            "description": "",
            "force_detach_policies": false,
            "id": "masa-vault-auth-vault-server-role",
            "max_session_duration": 3600,
            "name": "masa-vault-auth-vault-server-role",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "unique_id": "AROA266GU7ZPIZ4KZZBIS"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "vault-client",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "masa-vault-auth-vault-client-role:masa-vault-auth-vault-client-role-policy",
            "name": "masa-vault-auth-vault-client-role-policy",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"ConsulAutoJoin\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:DescribeInstances\",\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "masa-vault-auth-vault-client-role"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.vault-client"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "vault-server",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "masa-vault-auth-vault-server-role:masa-vault-auth-vault-server-role-policy",
            "name": "masa-vault-auth-vault-server-role-policy",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"ConsulAutoJoin\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:DescribeInstances\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VaultAWSAuthMethod\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:GetUser\",\n        \"iam:GetRole\",\n        \"iam:GetInstanceProfile\",\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VaultKMSUnseal\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:DescribeKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "masa-vault-auth-vault-server-role"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.vault-server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "vault-client",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f6b4f4104d26f399",
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:instance/i-02c12b8a1ef320824",
            "associate_public_ip_address": true,
            "availability_zone": "ap-northeast-1a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "host_id": null,
            "iam_instance_profile": "masa-vault-auth-vault-client-instance-profile",
            "id": "i-02c12b8a1ef320824",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "masa",
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-099849364c8cac32e",
            "private_dns": "ip-10-0-101-124.ap-northeast-1.compute.internal",
            "private_ip": "10.0.101.124",
            "public_dns": "",
            "public_ip": "52.194.253.144",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "volume_id": "vol-0d729b253e7e8cc8a",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0f4dec983d581ba10",
            "tags": {
              "ConsulDC": "consul-ap-northeast-1",
              "Name": "masa-vault-auth-vault-client",
              "TTL": "48"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "11ed5a6d001fdee356eff8613e10dbbde34dec0c",
            "user_data_base64": null,
            "volume_tags": {},
            "vpc_security_group_ids": [
              "sg-0e3b2f05d6cffa53c"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_iam_instance_profile.vault-client",
            "aws_iam_instance_profile.vault-server",
            "aws_instance.vault-server",
            "aws_security_group.testing",
            "module.vault_demo_vpc.aws_subnet.public",
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "vault-server",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f6b4f4104d26f399",
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:instance/i-023b30beca0d0c4ee",
            "associate_public_ip_address": true,
            "availability_zone": "ap-northeast-1a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "host_id": null,
            "iam_instance_profile": "masa-vault-auth-vault-server-instance-profile",
            "id": "i-023b30beca0d0c4ee",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "masa",
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-09c3f0eb485091c2c",
            "private_dns": "ip-10-0-101-67.ap-northeast-1.compute.internal",
            "private_ip": "10.0.101.67",
            "public_dns": "",
            "public_ip": "18.177.145.36",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "volume_id": "vol-025d247e9a61c7bfd",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0f4dec983d581ba10",
            "tags": {
              "ConsulDC": "dc1",
              "Name": "masa-vault-auth-vault-server-0",
              "TTL": "48"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "1a98976ce80c8abc6a828b99a233648a4b3144cc",
            "user_data_base64": null,
            "volume_tags": {},
            "vpc_security_group_ids": [
              "sg-0e3b2f05d6cffa53c"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_iam_instance_profile.vault-server",
            "aws_security_group.testing",
            "module.vault_demo_vpc.aws_subnet.public",
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "igw-0684c40633af00fba",
            "owner_id": "753646501470",
            "tags": {
              "Name": "masa-vault-auth-vpc"
            },
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "vault",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:ap-northeast-1:753646501470:alias/masa-vault-auth-vault-kms-unseal-key",
            "id": "alias/masa-vault-auth-vault-kms-unseal-key",
            "name": "alias/masa-vault-auth-vault-kms-unseal-key",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:ap-northeast-1:753646501470:key/a7aa022d-b5e7-4941-9a46-2c436c2cbca6",
            "target_key_id": "a7aa022d-b5e7-4941-9a46-2c436c2cbca6"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_kms_key.vault"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "vault",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:ap-northeast-1:753646501470:key/a7aa022d-b5e7-4941-9a46-2c436c2cbca6",
            "deletion_window_in_days": 7,
            "description": "Vault unseal key",
            "enable_key_rotation": false,
            "id": "a7aa022d-b5e7-4941-9a46-2c436c2cbca6",
            "is_enabled": true,
            "key_id": "a7aa022d-b5e7-4941-9a46-2c436c2cbca6",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Id\":\"key-default-1\",\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::753646501470:root\"},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"}],\"Version\":\"2012-10-17\"}",
            "tags": {
              "Name": "masa-vault-auth-vault-kms-unseal-key"
            }
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "database_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "database_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "elasticache_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "elasticache_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "intra_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "intra_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "private_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "private_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "public_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "public_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "redshift_inbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_network_acl_rule",
      "name": "redshift_outbound",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_redshift_subnet_group",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_internet_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_ipv6_egress",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "database_nat_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_ipv6_egress",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_nat_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": null,
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0684c40633af00fba",
            "id": "r-rtb-095b1c4a47a6c5fc11080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-095b1c4a47a6c5fc1",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null
            },
            "transit_gateway_id": "",
            "vpc_peering_connection_id": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vault_demo_vpc.aws_internet_gateway.this",
            "module.vault_demo_vpc.aws_route_table.public",
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway_ipv6",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "rtb-00a3773d65ea0a0fe",
            "owner_id": "753646501470",
            "propagating_vgws": [],
            "route": [],
            "tags": {
              "Name": "masa-vault-auth-vpc"
            },
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "rtb-095b1c4a47a6c5fc1",
            "owner_id": "753646501470",
            "propagating_vgws": [],
            "route": [
              {
                "cidr_block": "0.0.0.0/0",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-0684c40633af00fba",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "masa-vault-auth-vpc"
            },
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-04dbfae286383329f",
            "route_table_id": "rtb-00a3773d65ea0a0fe",
            "subnet_id": "subnet-01618bd4bc94ade4c"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vault_demo_vpc.aws_route_table.private",
            "module.vault_demo_vpc.aws_subnet.private",
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-03c4851ef018784ee",
            "route_table_id": "rtb-095b1c4a47a6c5fc1",
            "subnet_id": "subnet-0f4dec983d581ba10"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vault_demo_vpc.aws_route_table.public",
            "module.vault_demo_vpc.aws_subnet.public",
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "redshift_public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "testing",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:security-group/sg-0e3b2f05d6cffa53c",
            "description": "SSH and Internal Traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0e3b2f05d6cffa53c",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8200,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8200
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8201,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8201
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8500,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8500
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": true,
                "to_port": 0
              }
            ],
            "name": "masa-vault-auth-testing-sg",
            "name_prefix": null,
            "owner_id": "753646501470",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "masa-vault-auth"
            },
            "timeouts": null,
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "database",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "elasticache",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "intra",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:subnet/subnet-01618bd4bc94ade4c",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "ap-northeast-1a",
            "availability_zone_id": "apne1-az4",
            "cidr_block": "10.0.1.0/24",
            "id": "subnet-01618bd4bc94ade4c",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_public_ip_on_launch": false,
            "owner_id": "753646501470",
            "tags": {
              "Name": "masa-vault-auth-vpc"
            },
            "timeouts": null,
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:subnet/subnet-0f4dec983d581ba10",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "ap-northeast-1a",
            "availability_zone_id": "apne1-az4",
            "cidr_block": "10.0.101.0/24",
            "id": "subnet-0f4dec983d581ba10",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_public_ip_on_launch": true,
            "owner_id": "753646501470",
            "tags": {
              "Name": "masa-vault-auth-vpc"
            },
            "timeouts": null,
            "vpc_id": "vpc-0b0677efffb50e2d1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vault_demo_vpc.aws_vpc.this",
            "module.vault_demo_vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "redshift",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:ap-northeast-1:753646501470:vpc/vpc-0b0677efffb50e2d1",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-000739e9aa2b637fa",
            "default_route_table_id": "rtb-0da9a0aa9ccc62c2f",
            "default_security_group_id": "sg-0bfe7a66db158da31",
            "dhcp_options_id": "dopt-18bf3f7f",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": false,
            "enable_dns_support": true,
            "id": "vpc-0b0677efffb50e2d1",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "main_route_table_id": "rtb-0da9a0aa9ccc62c2f",
            "owner_id": "753646501470",
            "tags": {
              "Name": "masa-vault-auth-vpc"
            }
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_dhcp_options",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_dhcp_options_association",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "apigw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "appmesh_envoy_management",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "appstream",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "athena",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloud_directory",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloudformation",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "cloudtrail",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codebuild",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "codepipeline",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "config",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2messages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_dkr",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs_agent",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecs_telemetry",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "efs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "elasticloadbalancing",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "events",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "git_codecommit",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "glue",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kinesis_firehose",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kinesis_streams",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "kms",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "logs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "monitoring",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "rekognition",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_api",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_notebook",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sagemaker_runtime",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "secretsmanager",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "servicecatalog",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sns",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sqs",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssm",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssmmessages",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "storagegateway",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "sts",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "transfer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "transferserver",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "intra_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "intra_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "private_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "private_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "public_dynamodb",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "public_s3",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpc_ipv4_cidr_block_association",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_attachment",
      "name": "this",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_route_propagation",
      "name": "private",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.vault_demo_vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_route_propagation",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    }
  ]
}
